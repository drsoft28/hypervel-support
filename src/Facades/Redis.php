<?php

declare(strict_types=1);

namespace SwooleTW\Hyperf\Support\Facades;

use Hyperf\Redis\Redis as RedisClient;

/**
 * @method static mixed get($key)
 * @method static bool set($key, $value, $timeout = null)
 * @method static bool setex($key, $ttl, $value)
 * @method static bool setnx($key, $value)
 * @method static int del($key1, ...$otherKeys)
 * @method static int exists(...$keys)
 * @method static int incr($key)
 * @method static int incrBy($key, $value)
 * @method static float incrByFloat($key, $increment)
 * @method static int decr($key)
 * @method static int decrBy($key, $value)
 * @method static array mget(array $keys)
 * @method static bool mset($pairs)
 * @method static int ttl($key)
 * @method static array keys($pattern)
 * @method static int dbSize()
 * @method static bool flushDB()
 * @method static bool flushAll()
 * @method static array hGetAll($key)
 * @method static int hSet($key, $hashKey, $value)
 * @method static int hSetNx($key, $hashKey, $value)
 * @method static string hGet($key, $hashKey)
 * @method static int hLen($key)
 * @method static int hDel($key, $hashKey1, ...$otherHashKeys)
 * @method static array hKeys($key)
 * @method static array hVals($key)
 * @method static bool hExists($key, $hashKey)
 * @method static int rPush($key, $value1, ...$otherValues)
 * @method static int lPush($key, $value1, ...$otherValues)
 * @method static int lLen($key)
 * @method static array lRange($key, $start, $end)
 * @method static string lPop($key)
 * @method static string rPop($key)
 * @method static array blPop(array $keys, $timeout)
 * @method static array brPop(array $keys, $timeout)
 * @method static int sAdd($key, $value1, ...$otherValues)
 * @method static int sRem($key, $member1, ...$otherMembers)
 * @method static array sMembers($key)
 * @method static array sInter($key1, ...$otherKeys)
 * @method static int sInterStore($dstKey, $key1, ...$otherKeys)
 * @method static array sUnion($key1, ...$otherKeys)
 * @method static int sUnionStore($dstKey, $key1, ...$otherKeys)
 * @method static array sDiff($key1, ...$otherKeys)
 * @method static int sDiffStore($dstKey, $key1, ...$otherKeys)
 * @method static array zRange($key, $start, $end, $withscores = null)
 * @method static array zRevRange($key, $start, $end, $withscore = null)
 * @method static array zRangeByScore($key, $min, $max, array $options = [])
 * @method static array zRevRangeByScore($key, $max, $min, array $options = [])
 * @method static int zAdd($key, $score1, $value1, $score2 = null, $value2 = null, $scoreN = null, $valueN = null)
 * @method static int zRem($key, $member1, ...$otherMembers)
 * @method static int zCount($key, $min, $max)
 * @method static int zCard($key)
 * @method static float zScore($key, $member)
 * @method static int zRank($key, $member)
 * @method static float zIncrBy($key, $value, $member)
 * @method static int zUnionStore($output, $zSetKeys, array $weights = null, $aggregateFunction = 'SUM')
 * @method static int zInterStore($output, $zSetKeys, array $weights = null, $aggregateFunction = 'SUM')
 * @method static int expireAt($key, $timestamp)
 * @method static int pExpire($key, $milliseconds)
 * @method static int pExpireAt($key, $timestamp)
 * @method static array|bool scan(&$cursor, array $options = null)
 * @method static array|bool hscan($key, &$cursor, array $options = null)
 * @method static array|bool zscan($key, &$cursor, array $options = null)
 * @method static array|bool sscan($key, &$cursor, array $options = null)
 * @method static int pfAdd($key, array $elements)
 * @method static int pfCount($key)
 * @method static bool pfMerge($destkey, array $sourcekeys)
 * @method static mixed eval($script, $args = [], $numKeys = 0)
 * @method static mixed evalSha($scriptSha, $args = [], $numKeys = 0)
 * @method static mixed script($command, ...$scripts)
 * @method static string getLastError()
 * @method static bool clearLastError()
 * @method static string client($command, $value = '')
 * @method static mixed time()
 * @method static string|bool slowlog($command, $value = '')
 * @method static array command(...$arguments)
 * @method static int geoadd($key, $longitude, $latitude, $member)
 * @method static array geohash($key, ...$members)
 * @method static array geopos($key, ...$members)
 * @method static string geodist($key, $member1, $member2, $unit = null)
 * @method static array georadius($key, $longitude, $latitude, $radius, $unit, array $options = [])
 * @method static array georadiusbymember($key, $member, $radius, $unit, array $options = [])
 *
 * @see RedisClient
 */
class Redis extends Facade
{
    protected static function getFacadeAccessor()
    {
        return RedisClient::class;
    }
}

<?php

declare(strict_types=1);

namespace SwooleTW\Hyperf\Support\Facades;

use Hyperf\ViewEngine\Compiler\CompilerInterface;

/**
 * @method static string getCompiledPath(string $path)
 * @method static bool isExpired(string $path)
 * @method static void compile(?string $path = null)
 * @method static string compileString(string $value)
 * @method static void setEchoFormat(string $format)
 * @method static void withDoubleEncoding()
 * @method static void withoutDoubleEncoding()
 * @method static void directive(string $name, callable $handler)
 * @method static array getCustomDirectives()
 * @method static void if(string $name, callable $callback)
 * @method static bool check(string $name, array ...$parameters)
 * @method static void extend(callable $compiler)
 * @method static array getExtensions()
 * @method static void setPath(string $path)
 * @method static string stripParentheses(string $expression)
 * @method static void component(string $class, ?string $alias = null, string $prefix = '')
 * @method static void components(array $components, string $prefix = '')
 * @method static array getClassComponentAliases()
 * @method static void componentNamespace(string $namespace, string $prefix)
 * @method static array getClassComponentNamespaces()
 * @method static array getComponentAutoload()
 * @method static void setComponentAutoload(array $config)
 * @method static void aliasComponent(string $path, ?string $alias = null)
 * @method static void include(string $path, ?string $alias = null)
 * @method static void aliasInclude(string $path, ?string $alias = null)
 * @method static void precompiler(callable $precompiler)
 * @method static void withoutComponentTags()
 * @method static string getPath()
 * @method static string compileEchos(string $value)
 * @method static string compileStatements(string $value)
 * @method static string compileComments(string $value)
 * @method static string compilePhp(string $expression)
 * @method static string compileClass(string $expression)
 * @method static string compileIncludes(string $expression)
 * @method static string compileInclude(string $expression)
 * @method static string compileIncludeIf(string $expression)
 * @method static string compileIncludeWhen(string $expression)
 * @method static string compileIncludeUnless(string $expression)
 * @method static string compileIncludeFirst(string $expression)
 * @method static string compileEach(string $expression)
 * @method static string compilePush(string $expression)
 * @method static string compilePushIf(string $expression)
 * @method static string compilePrepend(string $expression)
 * @method static string compileEndpush(string $expression)
 * @method static string compileEndPrepend(string $expression)
 * @method static string compileStack(string $expression)
 * @method static string compileUnless(string $expression)
 * @method static string compileEndUnless()
 * @method static string compileIf(string $expression)
 * @method static string compileElseif(string $expression)
 * @method static string compileElse()
 * @method static string compileEndIf()
 * @method static string compileFor(string $expression)
 * @method static string compileForeach(string $expression)
 * @method static string compileForelse(string $expression)
 * @method static string compileCan(string $expression)
 * @method static string compileCanany(string $expression)
 * @method static string compileCannot(string $expression)
 * @method static string compileWhile(string $expression)
 * @method static string compileEndwhile()
 * @method static string compileEndfor()
 * @method static string compileEndforeach()
 * @method static string compileEndforelse()
 * @method static string compileEndcan()
 * @method static string compileEndcanany()
 * @method static string compileEndcannot()
 * @method static string compileOnce(string $id, string $expression)
 * @method static string compileHelpers()
 * @method static string compileUse(string $expression)
 * @method static string compileInject(string $expression)
 * @method static string compileMethod(string $method)
 * @method static string compileError(string $expression)
 * @method static string compileJson(string $expression)
 * @method static string compileUnset(string $expression)
 * @method static string compileExtends(string $expression)
 * @method static string compileSection(string $expression)
 * @method static string compileParent()
 * @method static string compileYield(string $expression)
 * @method static string compileShow()
 * @method static string compileAppend()
 * @method static string compileOverwrite()
 * @method static string compileStop()
 * @method static string compileEndsection()
 * @method static string compileSectionMissing(string $expression)
 * @method static string compileEndsectionMissing()
 *
 * @see \Hyperf\ViewEngine\Compiler\CompilerInterface
 * @see \Hyperf\ViewEngine\Compiler\BladeCompiler
 */
class Blade extends Facade
{
    protected static function getFacadeAccessor()
    {
        return CompilerInterface::class;
    }
}
